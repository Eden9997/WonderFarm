// Qu·∫£n l√Ω thanh c√¥ng c·ª• nhanh tr∆∞·ª£t l√™n v√† ƒëi·ªÅu khi·ªÉn c·ª≠ ch·ªâ
import { showMessage } from './uiSystem.js';
import { gameState } from './gameState.js';
import { initCharacterScene } from './characterSystem.js';

let startY = 0;
let currentY = 0;
let isSwiping = false;
let headerButtons = null;
let headerVisible = true;
const TOOLBAR_STATE_KEY = 'wonder_farm_toolbar_state';

// Kh·ªüi t·∫°o thanh c√¥ng c·ª•
export function initToolbar() {
    const toolbar = document.getElementById('quick-toolbar');
    const toolbarHandle = document.getElementById('toolbar-handle');
    headerButtons = document.querySelector('.header-buttons');
    
    if (!toolbar || !toolbarHandle) {
        console.error('Kh√¥ng t√¨m th·∫•y thanh c√¥ng c·ª• ho·∫∑c tay c·∫ßm thanh c√¥ng c·ª•');
        return;
    }
    
    // Ki·ªÉm tra tr·∫°ng th√°i ƒë√£ l∆∞u
    checkSavedToolbarState();
    
    // X·ª≠ l√Ω s·ª± ki·ªán khi nh·∫•p v√†o ph·∫ßn tay c·∫ßm
    toolbarHandle.addEventListener('click', () => {
        toggleToolbar();
    });
    
    // X·ª≠ l√Ω s·ª± ki·ªán vu·ªët
    setupSwipeHandlers();
    
    // G·∫Øn s·ª± ki·ªán cho c√°c n√∫t tr√™n thanh c√¥ng c·ª•
    setupToolbarButtons();
    
    // ƒêi·ªÅu ch·ªânh thanh c√¥ng c·ª• cho c√°c thi·∫øt b·ªã kh√°c nhau
    adjustToolbarForDevice();
    
    // X·ª≠ l√Ω s·ª± ki·ªán thay ƒë·ªïi k√≠ch th∆∞·ªõc m√†n h√¨nh
    window.addEventListener('resize', () => {
        adjustToolbarForDevice();
    });
}

// Chuy·ªÉn ƒë·ªïi hi·ªÉn th·ªã thanh c√¥ng c·ª•
function toggleToolbar() {
    const toolbar = document.getElementById('quick-toolbar');
    const toolbarHandle = document.getElementById('toolbar-handle');
    
    const isExpanded = toolbar.classList.toggle('expanded');
    toolbarHandle.setAttribute('aria-expanded', isExpanded);
    
    // L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i
    saveToolbarState(isExpanded);
    
    // Hi·ªÉn th·ªã/·∫®n c√°c n√∫t trong header
    toggleHeaderButtons(!isExpanded);
}

// L∆∞u tr·∫°ng th√°i thanh c√¥ng c·ª•
function saveToolbarState(isExpanded) {
    try {
        localStorage.setItem(TOOLBAR_STATE_KEY, JSON.stringify({
            expanded: isExpanded,
            timestamp: Date.now()
        }));
    } catch (e) {
        console.error('Kh√¥ng th·ªÉ l∆∞u tr·∫°ng th√°i thanh c√¥ng c·ª•:', e);
    }
}

// Ki·ªÉm tra tr·∫°ng th√°i ƒë√£ l∆∞u
function checkSavedToolbarState() {
    try {
        const savedState = localStorage.getItem(TOOLBAR_STATE_KEY);
        if (savedState) {
            const { expanded, timestamp } = JSON.parse(savedState);
            const toolbar = document.getElementById('quick-toolbar');
            const toolbarHandle = document.getElementById('toolbar-handle');
            
            // Ch·ªâ √°p d·ª•ng tr·∫°ng th√°i n·∫øu l∆∞u trong v√≤ng 24 gi·ªù
            const isRecent = (Date.now() - timestamp) < 24 * 60 * 60 * 1000;
            
            if (expanded && isRecent) {
                toolbar.classList.add('expanded');
                toolbarHandle.setAttribute('aria-expanded', true);
                toggleHeaderButtons(false);
            } else {
                toolbar.classList.remove('expanded');
                toolbarHandle.setAttribute('aria-expanded', false);
                toggleHeaderButtons(true);
            }
        }
    } catch (e) {
        console.error('L·ªói khi ƒë·ªçc tr·∫°ng th√°i thanh c√¥ng c·ª•:', e);
    }
}

// Hi·ªÉn th·ªã/·∫®n c√°c n√∫t trong header
function toggleHeaderButtons(show) {
    if (!headerButtons) return;
    
    headerVisible = show;
    headerButtons.style.opacity = show ? '1' : '0';
    headerButtons.style.visibility = show ? 'visible' : 'hidden';
    headerButtons.style.transform = show ? 'translateY(0)' : 'translateY(15px)';
    
    // V√¥ hi·ªáu h√≥a t∆∞∆°ng t√°c khi ·∫©n
    const buttons = headerButtons.querySelectorAll('.header-button');
    buttons.forEach(button => {
        button.style.pointerEvents = show ? 'auto' : 'none';
    });
}

// ƒêi·ªÅu ch·ªânh thanh c√¥ng c·ª• cho c√°c thi·∫øt b·ªã kh√°c nhau
function adjustToolbarForDevice() {
    const toolbar = document.getElementById('quick-toolbar');
    const gameBackground = document.querySelector('.game-background');
    
    if (toolbar && gameBackground) {
        // ƒê·∫£m b·∫£o thanh c√¥ng c·ª• n·∫±m trong ph·∫°m vi c·ªßa game
        const rect = gameBackground.getBoundingClientRect();
        toolbar.style.width = `${rect.width}px`;
        toolbar.style.left = `${rect.left}px`;
        
        // ƒêi·ªÅu ch·ªânh z-index ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªÉn th·ªã ƒë√∫ng
        toolbar.style.zIndex = '10000';
    }
}

// Thi·∫øt l·∫≠p c√°c n√∫t tr√™n thanh c√¥ng c·ª•
function setupToolbarButtons() {
    // C·ª≠a h√†ng
    const quickShopBtn = document.getElementById('quick-shop');
    if (quickShopBtn) {
        quickShopBtn.addEventListener('click', () => {
            openPanel('shop-panel');
        });
    }
    
    // Nhi·ªám v·ª•
    const quickQuestsBtn = document.getElementById('quick-quests');
    if (quickQuestsBtn) {
        quickQuestsBtn.addEventListener('click', () => {
            openPanel('quests-panel');
        });
    }
    
    // Nh√¢n v·∫≠t
    const quickCharacterBtn = document.getElementById('quick-character');
    if (quickCharacterBtn) {
        quickCharacterBtn.addEventListener('click', () => {
            openPanel('character-panel');
            // ƒê·∫£m b·∫£o kh·ªüi t·∫°o scene nh√¢n v·∫≠t
            setTimeout(() => {
                initCharacterScene();
            }, 100);
        });
    }
    
    // Th√†nh t·ª±u
    const quickAchievementsBtn = document.getElementById('quick-achievements');
    if (quickAchievementsBtn) {
        quickAchievementsBtn.addEventListener('click', () => {
            openPanel('achievements-panel');
        });
    }
    
    // B·∫£ng x·∫øp h·∫°ng
    const quickLeaderboardBtn = document.getElementById('quick-leaderboard');
    if (quickLeaderboardBtn) {
        quickLeaderboardBtn.addEventListener('click', () => {
            openPanel('leaderboard-panel');
        });
    }
    
    // Chia s·∫ª
    const quickShareBtn = document.getElementById('quick-share');
    if (quickShareBtn) {
        quickShareBtn.addEventListener('click', () => {
            shareProgress();
        });
    }
    
    // C√†i ƒë·∫∑t
    const quickSettingsBtn = document.getElementById('quick-settings');
    if (quickSettingsBtn) {
        quickSettingsBtn.addEventListener('click', () => {
            showSettings();
        });
    }
    
    // Th√™m hi·ªáu ·ª©ng khi ·∫•n v√†o n√∫t (ph·∫£n h·ªìi tr·ª±c quan)
    document.querySelectorAll('.toolbar-button').forEach(button => {
        button.addEventListener('touchstart', function() {
            this.classList.add('active-button');
        });
        
        button.addEventListener('touchend', function() {
            this.classList.remove('active-button');
        });
        
        button.addEventListener('mousedown', function() {
            this.classList.add('active-button');
        });
        
        button.addEventListener('mouseup', function() {
            this.classList.remove('active-button');
        });
        
        button.addEventListener('mouseleave', function() {
            this.classList.remove('active-button');
        });
    });
}

// Hi·ªÉn th·ªã c√†i ƒë·∫∑t game
function showSettings() {
    try {
        // ƒê√≥ng thanh c√¥ng c·ª• tr∆∞·ªõc khi m·ªü c√†i ƒë·∫∑t
        const toolbar = document.getElementById('quick-toolbar');
        if (toolbar.classList.contains('expanded')) {
            toolbar.classList.remove('expanded');
            saveToolbarState(false);
        }
        
        // Hi·ªÉn th·ªã c√†i ƒë·∫∑t d·ª±a v√†o Telegram Mini App n·∫øu c√≥
        if (window.Telegram && window.Telegram.WebApp) {
            // Hi·ªÉn th·ªã popup c√†i ƒë·∫∑t
            window.Telegram.WebApp.showPopup({
                title: '‚öôÔ∏è C√†i ƒë·∫∑t',
                message: 'ƒêi·ªÅu ch·ªânh c√°c thi·∫øt l·∫≠p game',
                buttons: [
                    {id: 'sound', type: 'default', text: 'üîä √Çm thanh: ' + (gameState.settings?.sound ? 'B·∫≠t' : 'T·∫Øt')},
                    {id: 'music', type: 'default', text: 'üéµ Nh·∫°c: ' + (gameState.settings?.music ? 'B·∫≠t' : 'T·∫Øt')},
                    {id: 'notifications', type: 'default', text: 'üì¢ Th√¥ng b√°o: ' + (gameState.settings?.notifications ? 'B·∫≠t' : 'T·∫Øt')},
                    {id: 'reset_tutorial', type: 'default', text: 'üîÑ ƒê·∫∑t l·∫°i h∆∞·ªõng d·∫´n'},
                    {id: 'close', type: 'cancel', text: 'ƒê√≥ng'}
                ]
            }, function(buttonId) {
                handleSettingsOption(buttonId);
            });
        } else {
            // Fallback khi kh√¥ng ch·∫°y tr√™n Telegram
            showMessage('C√†i ƒë·∫∑t s·∫Ω s·ªõm c√≥ m·∫∑t trong phi√™n b·∫£n ti·∫øp theo!');
        }
    } catch (error) {
        console.error('L·ªói khi hi·ªÉn th·ªã c√†i ƒë·∫∑t:', error);
        showMessage('Kh√¥ng th·ªÉ m·ªü c√†i ƒë·∫∑t, h√£y th·ª≠ l·∫°i sau');
    }
}

// X·ª≠ l√Ω l·ª±a ch·ªçn c√†i ƒë·∫∑t
function handleSettingsOption(option) {
    // ƒê·∫£m b·∫£o gameState.settings t·ªìn t·∫°i
    if (!gameState.settings) {
        gameState.settings = {
            sound: true,
            music: true,
            notifications: true
        };
    }
    
    switch (option) {
        case 'sound':
            // ƒê·∫£o tr·∫°ng th√°i √¢m thanh
            gameState.settings.sound = !gameState.settings.sound;
            showMessage(`√Çm thanh ƒë√£ ${gameState.settings.sound ? 'b·∫≠t' : 't·∫Øt'}`);
            break;
            
        case 'music':
            // ƒê·∫£o tr·∫°ng th√°i nh·∫°c
            gameState.settings.music = !gameState.settings.music;
            showMessage(`Nh·∫°c ƒë√£ ${gameState.settings.music ? 'b·∫≠t' : 't·∫Øt'}`);
            break;
            
        case 'notifications':
            // ƒê·∫£o tr·∫°ng th√°i th√¥ng b√°o
            gameState.settings.notifications = !gameState.settings.notifications;
            showMessage(`Th√¥ng b√°o ƒë√£ ${gameState.settings.notifications ? 'b·∫≠t' : 't·∫Øt'}`);
            break;
            
        case 'reset_tutorial':
            // ƒê·∫∑t l·∫°i c√°c b∆∞·ªõc h∆∞·ªõng d·∫´n ƒë√£ ho√†n th√†nh
            gameState.tutorialCompleted = {};
            showMessage('H∆∞·ªõng d·∫´n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i. V√†o l·∫ßn ti·∫øp theo b·∫°n s·∫Ω th·∫•y h∆∞·ªõng d·∫´n.');
            break;
    }
    
    // L∆∞u c√†i ƒë·∫∑t
    localStorage.setItem('wonder_farm_game_state', JSON.stringify(gameState));
}

// M·ªü panel ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh v√† ƒë√≥ng thanh c√¥ng c·ª•
function openPanel(panelId) {
    // ƒê√≥ng t·∫•t c·∫£ c√°c panel tr∆∞·ªõc
    closeAllPanels();
    
    // M·ªü panel ƒë∆∞·ª£c ch·ªçn
    const panel = document.getElementById(panelId);
    if (panel) {
        panel.classList.add('show');
        
        // ƒê√≥ng thanh c√¥ng c·ª• sau khi m·ªü panel
        toggleHeaderButtons(true);
        const toolbar = document.getElementById('quick-toolbar');
        if (toolbar.classList.contains('expanded')) {
            toolbar.classList.remove('expanded');
            saveToolbarState(false);
        }
    }
}

// ƒê√≥ng t·∫•t c·∫£ c√°c panel
function closeAllPanels() {
    const panels = [
        'shop-panel',
        'quests-panel', 
        'character-panel', 
        'achievements-panel', 
        'leaderboard-panel'
    ];
    
    panels.forEach(id => {
        const panel = document.getElementById(id);
        if (panel && panel.classList.contains('show')) {
            panel.classList.remove('show');
        }
    });
}

// Thi·∫øt l·∫≠p x·ª≠ l√Ω vu·ªët ƒë·ªÉ m·ªü/ƒë√≥ng thanh c√¥ng c·ª•
function setupSwipeHandlers() {
    const toolbar = document.getElementById('quick-toolbar');
    const gameContainer = document.querySelector('.game-container');
    
    if (!toolbar || !gameContainer) {
        console.error('Kh√¥ng t√¨m th·∫•y thanh c√¥ng c·ª• ho·∫∑c v√πng ch·ª©a game');
        return;
    }
    
    // Th√™m khu v·ª±c nh·∫≠n di·ªán vu·ªët
    let swipeArea = document.querySelector('.swipe-area');
    if (!swipeArea) {
        swipeArea = document.createElement('div');
        swipeArea.className = 'swipe-area';
        gameContainer.appendChild(swipeArea);
    }
    
    // S·ª± ki·ªán b·∫Øt ƒë·∫ßu vu·ªët (touch)
    document.addEventListener('touchstart', (e) => {
        startY = e.touches[0].clientY;
        currentY = startY;
        isSwiping = true;
    }, { passive: true });
    
    // S·ª± ki·ªán vu·ªët di chuy·ªÉn (touch)
    document.addEventListener('touchmove', (e) => {
        if (!isSwiping) return;
        currentY = e.touches[0].clientY;
        const diffY = startY - currentY;
        
        // Vu·ªët l√™n tr√™n khu v·ª±c g·∫ßn ƒë√°y m√†n h√¨nh
        if (diffY > 40 && startY > window.innerHeight - 100) {
            toolbar.classList.add('expanded');
            toggleHeaderButtons(false);
            saveToolbarState(true);
            isSwiping = false;
        }
        // Vu·ªët xu·ªëng khi thanh c√¥ng c·ª• ƒëang m·ªü
        else if (diffY < -40 && toolbar.classList.contains('expanded')) {
            toolbar.classList.remove('expanded');
            toggleHeaderButtons(true);
            saveToolbarState(false);
            isSwiping = false;
        }
    }, { passive: true });
    
    // S·ª± ki·ªán k·∫øt th√∫c vu·ªët (touch)
    document.addEventListener('touchend', () => {
        isSwiping = false;
    }, { passive: true });
    
    // X·ª≠ l√Ω mouse events cho tr·∫£i nghi·ªám desktop v√† testing
    document.addEventListener('mousedown', (e) => {
        // Ch·ªâ theo d√µi n·∫øu click g·∫ßn d∆∞·ªõi c√πng m√†n h√¨nh
        if (e.clientY > window.innerHeight - 100) {
            startY = e.clientY;
            currentY = startY;
            isSwiping = true;
        }
    });
    
    document.addEventListener('mousemove', (e) => {
        if (!isSwiping) return;
        currentY = e.clientY;
        const diffY = startY - currentY;
        
        // Vu·ªët l√™n tr√™n khu v·ª±c g·∫ßn ƒë√°y m√†n h√¨nh
        if (diffY > 40 && startY > window.innerHeight - 100) {
            toolbar.classList.add('expanded');
            toggleHeaderButtons(false);
            saveToolbarState(true);
            isSwiping = false;
        }
        // Vu·ªët xu·ªëng khi thanh c√¥ng c·ª• ƒëang m·ªü
        else if (diffY < -40 && toolbar.classList.contains('expanded')) {
            toolbar.classList.remove('expanded');
            toggleHeaderButtons(true);
            saveToolbarState(false);
            isSwiping = false;
        }
    });
    
    document.addEventListener('mouseup', () => {
        isSwiping = false;
    });
}

// Chia s·∫ª ti·∫øn ƒë·ªô - t√≠ch h·ª£p v·ªõi Telegram Mini App
function shareProgress() {
    try {
        if (window.Telegram && window.Telegram.WebApp) {
            // L·∫•y th√¥ng tin ti·∫øn ƒë·ªô t·ª´ gameState
            const level = gameState.level || 1;
            const money = gameState.money || 0;
            const unlockedPlants = Object.values(gameState.unlockedPlants || {}).filter(Boolean).length;
            const harvestedCrops = gameState.stats?.harvestedCrops || 0;
            
            // T·∫°o th√¥ng ƒëi·ªáp chia s·∫ª
            const shareMessage = `üå± Wonder Farm üå±\n\nüë®‚Äçüåæ T√¥i ƒë√£ ƒë·∫°t c·∫•p ƒë·ªô ${level}!\nüí∞ Xu: ${money}\nüåΩ ƒê√£ thu ho·∫°ch: ${harvestedCrops} c√¢y tr·ªìng\n\nH√£y ch∆°i c√πng t√¥i tr√™n Telegram Mini App!`;
            
            // Hi·ªÉn th·ªã popup x√°c nh·∫≠n chia s·∫ª
            if (window.Telegram.WebApp.showPopup) {
                window.Telegram.WebApp.showPopup({
                    title: 'üåü Chia s·∫ª ti·∫øn ƒë·ªô',
                    message: 'B·∫°n mu·ªën chia s·∫ª ti·∫øn ƒë·ªô ch∆°i game c·ªßa m√¨nh v·ªõi b·∫°n b√®?',
                    buttons: [
                        {id: 'share', type: 'default', text: '‚ú® Chia s·∫ª'},
                        {id: 'cancel', type: 'cancel', text: 'H·ªßy'}
                    ]
                }, function(buttonId) {
                    if (buttonId === 'share') {
                        // G·ª≠i th√¥ng ƒëi·ªáp qua Telegram
                        if (window.Telegram.WebApp.switchInlineQuery) {
                            window.Telegram.WebApp.switchInlineQuery(shareMessage, ['users', 'groups']);
                            showMessage('ƒê√£ chia s·∫ª ti·∫øn ƒë·ªô c·ªßa b·∫°n!');
                        } else {
                            showMessage('Kh√¥ng th·ªÉ chia s·∫ª ti·∫øn ƒë·ªô, h√£y th·ª≠ l·∫°i sau!');
                        }
                    }
                });
            } else {
                // Fallback n·∫øu kh√¥ng c√≥ popup API
                if (window.Telegram.WebApp.switchInlineQuery) {
                    window.Telegram.WebApp.switchInlineQuery(shareMessage, ['users', 'groups']);
                    showMessage('ƒê√£ chia s·∫ª ti·∫øn ƒë·ªô c·ªßa b·∫°n!');
                } else {
                    showMessage('Kh√¥ng th·ªÉ chia s·∫ª ti·∫øn ƒë·ªô, h√£y th·ª≠ l·∫°i sau!');
                }
            }
        } else {
            showMessage('T√≠nh nƒÉng chia s·∫ª ch·ªâ ho·∫°t ƒë·ªông trong Telegram Mini App');
        }
    } catch (error) {
        console.error("L·ªói khi chia s·∫ª ti·∫øn ƒë·ªô:", error);
        showMessage('Kh√¥ng th·ªÉ chia s·∫ª ti·∫øn ƒë·ªô ngay l√∫c n√†y');
    }
}