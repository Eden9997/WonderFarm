// H·ªá th·ªëng x√£ h·ªôi - B·∫°n b√®, Qu√† t·∫∑ng v√† Ch·ª£ trao ƒë·ªïi
import { gameState } from './gameState.js';
import { showGameMessage } from './uiSystem.js';

// D·ªØ li·ªáu m·∫´u cho b·∫°n b√®, qu√† t·∫∑ng v√† m·∫∑t h√†ng ch·ª£
const mockFriends = [
    { id: 1, name: "Anna", level: 15, lastActive: "H√¥m nay", avatar: "img/Character/Character_base.png", online: true },
    { id: 2, name: "Tom", level: 8, lastActive: "2 gi·ªù tr∆∞·ªõc", avatar: "img/Character/Character_base.png", online: true },
    { id: 3, name: "Linda", level: 22, lastActive: "V·ª´a m·ªõi", avatar: "img/Character/Character_base.png", online: true },
    { id: 4, name: "Mike", level: 5, lastActive: "2 ng√†y tr∆∞·ªõc", avatar: "img/Character/Character_base.png", online: false },
    { id: 5, name: "Sarah", level: 18, lastActive: "1 tu·∫ßn tr∆∞·ªõc", avatar: "img/Character/Character_base.png", online: false }
];

const mockGifts = {
    sent: [
        { id: 1, type: "seed", name: "H·∫°t gi·ªëng t√°o", receiverId: 2, receiverName: "Tom", sentTime: "H√¥m nay" },
        { id: 2, type: "fertilizer", name: "Ph√¢n b√≥n cao c·∫•p", receiverId: 3, receiverName: "Linda", sentTime: "H√¥m qua" }
    ],
    received: [
        { id: 3, type: "water", name: "N∆∞·ªõc ma thu·∫≠t", senderId: 1, senderName: "Anna", sentTime: "H√¥m nay", claimed: false },
        { id: 4, type: "seed", name: "H·∫°t gi·ªëng d∆∞a h·∫•u", senderId: 3, senderName: "Linda", sentTime: "2 ng√†y tr∆∞·ªõc", claimed: true }
    ]
};

const mockMarketItems = [
    { id: 1, type: "seed", name: "H·∫°t gi·ªëng d∆∞a h·∫•u", price: 50, quantity: 10, sellerId: 2, sellerName: "Tom", listedTime: "30 ph√∫t tr∆∞·ªõc" },
    { id: 2, type: "fertilizer", name: "Ph√¢n b√≥n cao c·∫•p", price: 100, quantity: 5, sellerId: 1, sellerName: "Anna", listedTime: "2 gi·ªù tr∆∞·ªõc" },
    { id: 3, type: "water", name: "N∆∞·ªõc ma thu·∫≠t", price: 75, quantity: 8, sellerId: 3, sellerName: "Linda", listedTime: "1 ng√†y tr∆∞·ªõc" }
];

const playerInventory = [
    { id: 1, type: "seed", name: "H·∫°t gi·ªëng d√¢u t√¢y", quantity: 15 },
    { id: 2, type: "seed", name: "H·∫°t gi·ªëng b√≠ ng√¥", quantity: 8 },
    { id: 3, type: "fertilizer", name: "Ph√¢n b√≥n th∆∞·ªùng", quantity: 20 },
    { id: 4, type: "fertilizer", name: "Ph√¢n b√≥n cao c·∫•p", quantity: 5 },
    { id: 5, type: "water", name: "N∆∞·ªõc ma thu·∫≠t", quantity: 12 }
];

// Kh·ªüi t·∫°o h·ªá th·ªëng x√£ h·ªôi
export function initSocialSystem() {
    console.log('Initializing social system...');
    
    // T·∫°o HTML cho c√°c panel x√£ h·ªôi
    createSocialPanelsHTML();
    
    // Thi·∫øt l·∫≠p s·ª± ki·ªán cho c√°c panel
    setupSocialPanelEvents();
    
    // L·∫Øng nghe c√°c s·ª± ki·ªán k·∫øt n·ªëi t·ª´ m√°y ch·ªß (m√¥ ph·ªèng)
    setupMockNotifications();
}

// T·∫°o HTML cho c√°c panel x√£ h·ªôi
function createSocialPanelsHTML() {
    const socialPanelsHTML = `
        <!-- Panel b·∫°n b√® -->
        <div id="friends-panel" class="game-panel hidden">
            <div class="panel-header">
                <h2>B·∫°n b√®</h2>
                <button class="close-btn">&times;</button>
            </div>
            <div class="panel-content friends-content">
                <div class="friends-filter">
                    <input type="text" placeholder="T√¨m ki·∫øm b·∫°n b√®..." id="friends-search">
                    <div class="filter-buttons">
                        <button class="filter-btn active" data-filter="all">T·∫•t c·∫£</button>
                        <button class="filter-btn" data-filter="online">ƒêang online</button>
                        <button class="filter-btn" data-filter="recent">Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y</button>
                    </div>
                </div>
                
                <div class="friends-list">
                    <!-- Danh s√°ch b·∫°n b√® s·∫Ω ƒë∆∞·ª£c th√™m v√†o ƒë√¢y -->
                </div>
                
                <div class="friends-actions">
                    <button class="primary-btn" id="add-friend-btn">+ Th√™m b·∫°n m·ªõi</button>
                </div>
            </div>
        </div>
        
        <!-- Panel qu√† t·∫∑ng -->
        <div id="gifts-panel" class="game-panel hidden">
            <div class="panel-header">
                <h2>Qu√† t·∫∑ng</h2>
                <button class="close-btn">&times;</button>
            </div>
            <div class="panel-content gifts-content">
                <div class="gifts-tabs">
                    <div class="gift-tab active" data-tab="send-gift">G·ª≠i qu√†</div>
                    <div class="gift-tab" data-tab="received-gift">Qu√† nh·∫≠n ƒë∆∞·ª£c</div>
                </div>
                
                <div class="gift-tab-content active" id="send-gift">
                    <div class="gift-selection">
                        <div class="gift-type selected" data-gift="seed">
                            <div class="gift-icon">üå±</div>
                            <div class="gift-name">H·∫°t gi·ªëng</div>
                        </div>
                        <div class="gift-type" data-gift="water">
                            <div class="gift-icon">üíß</div>
                            <div class="gift-name">N∆∞·ªõc</div>
                        </div>
                        <div class="gift-type" data-gift="fertilizer">
                            <div class="gift-icon">üß™</div>
                            <div class="gift-name">Ph√¢n b√≥n</div>
                        </div>
                    </div>
                    
                    <h3>Ch·ªçn ng∆∞·ªùi nh·∫≠n</h3>
                    <div class="gift-recipients">
                        <!-- Danh s√°ch ng∆∞·ªùi nh·∫≠n s·∫Ω ƒë∆∞·ª£c th√™m v√†o ƒë√¢y -->
                    </div>
                </div>
                
                <div class="gift-tab-content" id="received-gift">
                    <div class="gifts-received">
                        <!-- Danh s√°ch qu√† nh·∫≠n ƒë∆∞·ª£c s·∫Ω ƒë∆∞·ª£c th√™m v√†o ƒë√¢y -->
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Panel ch·ª£ trao ƒë·ªïi -->
        <div id="market-panel" class="game-panel hidden">
            <div class="panel-header">
                <h2>Ch·ª£ trao ƒë·ªïi</h2>
                <button class="close-btn">&times;</button>
            </div>
            <div class="panel-content market-content">
                <div class="market-tabs">
                    <div class="market-tab active" data-tab="browse-market">Mua s·∫Øm</div>
                    <div class="market-tab" data-tab="my-listings">M·∫∑t h√†ng c·ªßa t√¥i</div>
                    <div class="market-tab" data-tab="sell-items">B√°n h√†ng</div>
                </div>
                
                <div class="market-tab-content active" id="browse-market">
                    <div class="market-search">
                        <input type="text" placeholder="T√¨m ki·∫øm m·∫∑t h√†ng..." id="market-search">
                        <select id="market-filter">
                            <option value="all">T·∫•t c·∫£</option>
                            <option value="seed">H·∫°t gi·ªëng</option>
                            <option value="fertilizer">Ph√¢n b√≥n</option>
                            <option value="water">N∆∞·ªõc</option>
                        </select>
                    </div>
                    
                    <div class="market-items">
                        <!-- Danh s√°ch m·∫∑t h√†ng s·∫Ω ƒë∆∞·ª£c th√™m v√†o ƒë√¢y -->
                    </div>
                </div>
                
                <div class="market-tab-content" id="my-listings">
                    <div class="my-market-items">
                        <!-- Danh s√°ch m·∫∑t h√†ng c·ªßa ng∆∞·ªùi ch∆°i s·∫Ω ƒë∆∞·ª£c th√™m v√†o ƒë√¢y -->
                        <div class="empty-message">B·∫°n ch∆∞a c√≥ m·∫∑t h√†ng n√†o ƒëang b√°n</div>
                    </div>
                </div>
                
                <div class="market-tab-content" id="sell-items">
                    <h3>Ch·ªçn v·∫≠t ph·∫©m ƒë·ªÉ b√°n</h3>
                    <div class="inventory-grid">
                        <!-- Danh s√°ch v·∫≠t ph·∫©m trong kho s·∫Ω ƒë∆∞·ª£c th√™m v√†o ƒë√¢y -->
                    </div>
                    
                    <div class="listing-form">
                        <div class="form-group">
                            <label>S·ªë l∆∞·ª£ng:</label>
                            <input type="number" id="sell-quantity" min="1" value="1">
                        </div>
                        <div class="form-group">
                            <label>Gi√° b√°n:</label>
                            <div class="price-input">
                                <input type="number" id="sell-price" min="1" value="10">
                                <div class="coin-icon">ü™ô</div>
                            </div>
                        </div>
                        <button class="primary-btn" id="list-item-btn" disabled>ƒêƒÉng b√°n</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Th√™m c√°c panel v√†o body
    document.body.insertAdjacentHTML('beforeend', socialPanelsHTML);
}

// Thi·∫øt l·∫≠p s·ª± ki·ªán cho c√°c panel
function setupSocialPanelEvents() {
    // S·ª± ki·ªán cho c√°c n√∫t ƒë√≥ng panel
    document.querySelectorAll('.close-btn').forEach(button => {
        button.addEventListener('click', function() {
            const panel = this.closest('.game-panel');
            if (panel) {
                panel.classList.add('hidden');
            }
        });
    });
    
    // =========== S·ª± ki·ªán cho panel b·∫°n b√® ===========
    // T·∫£i danh s√°ch b·∫°n b√®
    loadFriendsList(mockFriends);
    
    // S·ª± ki·ªán t√¨m ki·∫øm b·∫°n b√®
    const friendsSearch = document.getElementById('friends-search');
    if (friendsSearch) {
        friendsSearch.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const filteredFriends = mockFriends.filter(friend => 
                friend.name.toLowerCase().includes(searchTerm)
            );
            loadFriendsList(filteredFriends);
        });
    }
    
    // S·ª± ki·ªán cho c√°c n√∫t l·ªçc b·∫°n b√®
    document.querySelectorAll('.filter-btn').forEach(button => {
        button.addEventListener('click', function() {
            // B·ªè tr·∫°ng th√°i active c·ªßa t·∫•t c·∫£ c√°c n√∫t
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Th√™m tr·∫°ng th√°i active cho n√∫t ƒë∆∞·ª£c nh·∫•p
            this.classList.add('active');
            
            // L·ªçc b·∫°n b√® d·ª±a tr√™n b·ªô l·ªçc
            const filter = this.getAttribute('data-filter');
            let filteredFriends;
            
            switch (filter) {
                case 'online':
                    filteredFriends = mockFriends.filter(friend => friend.online);
                    break;
                case 'recent':
                    filteredFriends = mockFriends.filter(friend => 
                        friend.lastActive.includes('H√¥m nay') || 
                        friend.lastActive.includes('V·ª´a m·ªõi') || 
                        friend.lastActive.includes('gi·ªù') || 
                        friend.lastActive.includes('ph√∫t')
                    );
                    break;
                default:
                    filteredFriends = [...mockFriends];
            }
            
            // Hi·ªÉn th·ªã b·∫°n b√® ƒë√£ ƒë∆∞·ª£c l·ªçc
            loadFriendsList(filteredFriends);
        });
    });
    
    // S·ª± ki·ªán cho n√∫t th√™m b·∫°n m·ªõi
    const addFriendBtn = document.getElementById('add-friend-btn');
    if (addFriendBtn) {
        addFriendBtn.addEventListener('click', function() {
            showGameMessage('T√≠nh nƒÉng th√™m b·∫°n s·∫Ω s·ªõm ƒë∆∞·ª£c c·∫≠p nh·∫≠t!');
        });
    }
    
    // =========== S·ª± ki·ªán cho panel qu√† t·∫∑ng ===========
    // S·ª± ki·ªán chuy·ªÉn tab qu√† t·∫∑ng
    document.querySelectorAll('.gift-tab').forEach(tab => {
        tab.addEventListener('click', function() {
            // B·ªè active t·∫•t c·∫£ c√°c tab
            document.querySelectorAll('.gift-tab').forEach(t => {
                t.classList.remove('active');
            });
            
            // B·ªè active t·∫•t c·∫£ c√°c tab content
            document.querySelectorAll('.gift-tab-content').forEach(content => {
                content.classList.remove('active');
            });
            
            // Th√™m active cho tab ƒë∆∞·ª£c ch·ªçn
            this.classList.add('active');
            
            // Hi·ªÉn th·ªã tab content t∆∞∆°ng ·ª©ng
            const tabId = this.getAttribute('data-tab');
            document.getElementById(tabId).classList.add('active');
            
            // T·∫£i d·ªØ li·ªáu cho tab
            if (tabId === 'send-gift') {
                loadGiftRecipients();
            } else if (tabId === 'received-gift') {
                loadReceivedGifts();
            }
        });
    });
    
    // S·ª± ki·ªán ch·ªçn lo·∫°i qu√† t·∫∑ng
    document.querySelectorAll('.gift-type').forEach(type => {
        type.addEventListener('click', function() {
            // B·ªè selected t·∫•t c·∫£ c√°c lo·∫°i qu√†
            document.querySelectorAll('.gift-type').forEach(t => {
                t.classList.remove('selected');
            });
            
            // Th√™m selected cho lo·∫°i qu√† ƒë∆∞·ª£c ch·ªçn
            this.classList.add('selected');
            
            // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi nh·∫≠n d·ª±a tr√™n qu√† ƒë∆∞·ª£c ch·ªçn
            loadGiftRecipients();
        });
    });
    
    // T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu cho panel qu√† t·∫∑ng
    loadGiftRecipients();
    
    // =========== S·ª± ki·ªán cho panel ch·ª£ trao ƒë·ªïi ===========
    // S·ª± ki·ªán chuy·ªÉn tab ch·ª£
    document.querySelectorAll('.market-tab').forEach(tab => {
        tab.addEventListener('click', function() {
            // B·ªè active t·∫•t c·∫£ c√°c tab
            document.querySelectorAll('.market-tab').forEach(t => {
                t.classList.remove('active');
            });
            
            // B·ªè active t·∫•t c·∫£ c√°c tab content
            document.querySelectorAll('.market-tab-content').forEach(content => {
                content.classList.remove('active');
            });
            
            // Th√™m active cho tab ƒë∆∞·ª£c ch·ªçn
            this.classList.add('active');
            
            // Hi·ªÉn th·ªã tab content t∆∞∆°ng ·ª©ng
            const tabId = this.getAttribute('data-tab');
            document.getElementById(tabId).classList.add('active');
            
            // T·∫£i d·ªØ li·ªáu cho tab
            if (tabId === 'browse-market') {
                loadMarketItems(mockMarketItems);
            } else if (tabId === 'sell-items') {
                loadInventoryItems();
            }
        });
    });
    
    // S·ª± ki·ªán t√¨m ki·∫øm v√† l·ªçc m·∫∑t h√†ng ch·ª£
    const marketSearch = document.getElementById('market-search');
    const marketFilter = document.getElementById('market-filter');
    
    if (marketSearch && marketFilter) {
        const updateMarketItems = () => {
            const searchTerm = marketSearch.value.toLowerCase();
            const filterValue = marketFilter.value;
            
            const filteredItems = mockMarketItems.filter(item => {
                const matchesSearch = item.name.toLowerCase().includes(searchTerm);
                const matchesFilter = filterValue === 'all' || item.type === filterValue;
                
                return matchesSearch && matchesFilter;
            });
            
            loadMarketItems(filteredItems);
        };
        
        marketSearch.addEventListener('input', updateMarketItems);
        marketFilter.addEventListener('change', updateMarketItems);
    }
    
    // T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu cho panel ch·ª£
    loadMarketItems(mockMarketItems);
    loadInventoryItems();
}

// T·∫£i danh s√°ch b·∫°n b√®
function loadFriendsList(friends) {
    const friendsList = document.querySelector('.friends-list');
    if (!friendsList) return;
    
    // X√≥a danh s√°ch hi·ªán t·∫°i
    friendsList.innerHTML = '';
    
    if (friends.length === 0) {
        friendsList.innerHTML = '<div class="empty-message">Kh√¥ng t√¨m th·∫•y b·∫°n b√®</div>';
        return;
    }
    
    // Th√™m t·ª´ng b·∫°n b√® v√†o danh s√°ch
    friends.forEach(friend => {
        const friendHTML = `
            <div class="friend-item" data-id="${friend.id}">
                <div class="friend-avatar">
                    <img src="${friend.avatar}" alt="${friend.name}">
                    <div class="status-dot ${friend.online ? 'online' : 'offline'}"></div>
                </div>
                <div class="friend-info">
                    <div class="friend-name">${friend.name}</div>
                    <div class="friend-level">C·∫•p ${friend.level}</div>
                    <div class="friend-last-active">${friend.online ? 'ƒêang online' : `Ho·∫°t ƒë·ªông: ${friend.lastActive}`}</div>
                </div>
                <div class="friend-actions">
                    <div class="action-btn" data-action="visit">
                        <div class="action-icon">üè°</div>
                        <div class="action-text">ThƒÉm</div>
                    </div>
                    <div class="action-btn" data-action="gift">
                        <div class="action-icon">üéÅ</div>
                        <div class="action-text">T·∫∑ng</div>
                    </div>
                </div>
            </div>
        `;
        
        friendsList.insertAdjacentHTML('beforeend', friendHTML);
    });
    
    // Thi·∫øt l·∫≠p s·ª± ki·ªán cho c√°c n√∫t h√†nh ƒë·ªông b·∫°n b√®
    friendsList.querySelectorAll('.action-btn').forEach(button => {
        button.addEventListener('click', function() {
            const action = this.getAttribute('data-action');
            const friendId = this.closest('.friend-item').getAttribute('data-id');
            const friend = friends.find(f => f.id === parseInt(friendId));
            
            if (action === 'visit') {
                showGameMessage(`ƒêang gh√© thƒÉm n√¥ng tr·∫°i c·ªßa ${friend.name}...`);
                // TODO: Th√™m logic ƒë·ªÉ gh√© thƒÉm n√¥ng tr·∫°i b·∫°n b√®
            } else if (action === 'gift') {
                showGiftsPanel();
                // TODO: Chuy·ªÉn tr·ª±c ti·∫øp ƒë·∫øn tab g·ª≠i qu√† v√† ch·ªçn s·∫µn ng∆∞·ªùi b·∫°n n√†y
            }
        });
    });
}

// T·∫£i danh s√°ch ng∆∞·ªùi nh·∫≠n qu√†
function loadGiftRecipients() {
    const recipientsContainer = document.querySelector('.gift-recipients');
    if (!recipientsContainer) return;
    
    // X√≥a danh s√°ch hi·ªán t·∫°i
    recipientsContainer.innerHTML = '';
    
    // Th√™m t·ª´ng ng∆∞·ªùi nh·∫≠n v√†o danh s√°ch
    mockFriends.forEach(friend => {
        const recipientHTML = `
            <div class="gift-recipient" data-id="${friend.id}">
                <div class="recipient-avatar">
                    <img src="${friend.avatar}" alt="${friend.name}">
                </div>
                <div class="recipient-name">${friend.name}</div>
                <button class="send-gift-btn">T·∫∑ng qu√†</button>
            </div>
        `;
        
        recipientsContainer.insertAdjacentHTML('beforeend', recipientHTML);
    });
    
    // Thi·∫øt l·∫≠p s·ª± ki·ªán cho c√°c n√∫t g·ª≠i qu√†
    recipientsContainer.querySelectorAll('.send-gift-btn').forEach(button => {
        button.addEventListener('click', function() {
            const recipientId = this.closest('.gift-recipient').getAttribute('data-id');
            const recipient = mockFriends.find(f => f.id === parseInt(recipientId));
            
            const selectedGift = document.querySelector('.gift-type.selected');
            const giftType = selectedGift ? selectedGift.getAttribute('data-gift') : null;
            
            if (recipient && giftType) {
                sendGift(recipient, giftType);
            }
        });
    });
}

// T·∫£i danh s√°ch qu√† ƒë√£ nh·∫≠n
function loadReceivedGifts() {
    const giftsContainer = document.querySelector('.gifts-received');
    if (!giftsContainer) return;
    
    // X√≥a danh s√°ch hi·ªán t·∫°i
    giftsContainer.innerHTML = '';
    
    if (mockGifts.received.length === 0) {
        giftsContainer.innerHTML = '<div class="empty-message">B·∫°n ch∆∞a nh·∫≠n ƒë∆∞·ª£c qu√† n√†o</div>';
        return;
    }
    
    // Th√™m t·ª´ng qu√† ƒë√£ nh·∫≠n v√†o danh s√°ch
    mockGifts.received.forEach(gift => {
        const giftHTML = `
            <div class="gift-item ${gift.claimed ? 'claimed' : ''}" data-id="${gift.id}">
                <div class="gift-icon">${getGiftIcon(gift.type)}</div>
                <div class="gift-info">
                    <div class="gift-name">${gift.name}</div>
                    <div class="gift-sender">T·ª´: ${gift.senderName}</div>
                    <div class="gift-time">Nh·∫≠n: ${gift.sentTime}</div>
                </div>
                <button class="claim-gift-btn" ${gift.claimed ? 'disabled' : ''}>
                    ${gift.claimed ? 'ƒê√£ nh·∫≠n' : 'Nh·∫≠n qu√†'}
                </button>
            </div>
        `;
        
        giftsContainer.insertAdjacentHTML('beforeend', giftHTML);
    });
    
    // Thi·∫øt l·∫≠p s·ª± ki·ªán cho c√°c n√∫t nh·∫≠n qu√†
    giftsContainer.querySelectorAll('.claim-gift-btn:not([disabled])').forEach(button => {
        button.addEventListener('click', function() {
            const giftId = this.closest('.gift-item').getAttribute('data-id');
            const gift = mockGifts.received.find(g => g.id === parseInt(giftId));
            
            if (gift) {
                claimGift(gift);
                
                // C·∫≠p nh·∫≠t UI
                const giftItem = this.closest('.gift-item');
                giftItem.classList.add('claimed');
                this.disabled = true;
                this.textContent = 'ƒê√£ nh·∫≠n';
            }
        });
    });
}

// T·∫£i danh s√°ch m·∫∑t h√†ng trong ch·ª£
function loadMarketItems(items) {
    const marketItemsContainer = document.querySelector('.market-items');
    if (!marketItemsContainer) return;
    
    // X√≥a danh s√°ch hi·ªán t·∫°i
    marketItemsContainer.innerHTML = '';
    
    if (items.length === 0) {
        marketItemsContainer.innerHTML = '<div class="empty-message">Kh√¥ng c√≥ m·∫∑t h√†ng n√†o</div>';
        return;
    }
    
    // Th√™m t·ª´ng m·∫∑t h√†ng v√†o danh s√°ch
    items.forEach(item => {
        const itemHTML = `
            <div class="market-item" data-id="${item.id}">
                <div class="market-item-icon">${getGiftIcon(item.type)}</div>
                <div class="market-item-info">
                    <div class="market-item-name">${item.name}</div>
                    <div class="market-item-seller">Ng∆∞·ªùi b√°n: ${item.sellerName}</div>
                    <div class="market-item-time">ƒêƒÉng: ${item.listedTime}</div>
                </div>
                <div class="market-item-details">
                    <div class="market-item-quantity">SL: ${item.quantity}</div>
                    <div class="market-item-price">
                        ${item.price} <span>ü™ô</span>
                    </div>
                    <button class="buy-item-btn">Mua</button>
                </div>
            </div>
        `;
        
        marketItemsContainer.insertAdjacentHTML('beforeend', itemHTML);
    });
    
    // Thi·∫øt l·∫≠p s·ª± ki·ªán cho c√°c n√∫t mua h√†ng
    marketItemsContainer.querySelectorAll('.buy-item-btn').forEach(button => {
        button.addEventListener('click', function() {
            const itemId = this.closest('.market-item').getAttribute('data-id');
            const item = mockMarketItems.find(i => i.id === parseInt(itemId));
            
            if (item) {
                buyMarketItem(item);
            }
        });
    });
}

// T·∫£i danh s√°ch v·∫≠t ph·∫©m trong kho ƒë·ªì
function loadInventoryItems() {
    const inventoryGrid = document.querySelector('.inventory-grid');
    if (!inventoryGrid) return;
    
    // X√≥a danh s√°ch hi·ªán t·∫°i
    inventoryGrid.innerHTML = '';
    
    if (playerInventory.length === 0) {
        inventoryGrid.innerHTML = '<div class="empty-message">Kho ƒë·ªì tr·ªëng</div>';
        return;
    }
    
    // Th√™m t·ª´ng v·∫≠t ph·∫©m v√†o l∆∞·ªõi
    playerInventory.forEach(item => {
        const itemHTML = `
            <div class="inventory-item" data-id="${item.id}">
                <div class="item-icon">${getGiftIcon(item.type)}</div>
                <div class="item-name">${item.name}</div>
                <div class="item-quantity">S·ªë l∆∞·ª£ng: ${item.quantity}</div>
            </div>
        `;
        
        inventoryGrid.insertAdjacentHTML('beforeend', itemHTML);
    });
    
    // Thi·∫øt l·∫≠p s·ª± ki·ªán cho c√°c v·∫≠t ph·∫©m trong kho
    inventoryGrid.querySelectorAll('.inventory-item').forEach(itemElement => {
        itemElement.addEventListener('click', function() {
            // B·ªè selected cho t·∫•t c·∫£ c√°c item
            document.querySelectorAll('.inventory-item').forEach(item => {
                item.classList.remove('selected');
            });
            
            // Th√™m selected cho item ƒë∆∞·ª£c ch·ªçn
            this.classList.add('selected');
            
            // K√≠ch ho·∫°t n√∫t ƒëƒÉng b√°n
            const listItemBtn = document.getElementById('list-item-btn');
            if (listItemBtn) {
                listItemBtn.disabled = false;
            }
            
            // Thi·∫øt l·∫≠p s·ªë l∆∞·ª£ng t·ªëi ƒëa
            const itemId = this.getAttribute('data-id');
            const item = playerInventory.find(i => i.id === parseInt(itemId));
            
            const sellQuantity = document.getElementById('sell-quantity');
            if (sellQuantity && item) {
                sellQuantity.max = item.quantity;
            }
        });
    });
    
    // Thi·∫øt l·∫≠p s·ª± ki·ªán cho n√∫t ƒëƒÉng b√°n
    const listItemBtn = document.getElementById('list-item-btn');
    if (listItemBtn) {
        listItemBtn.addEventListener('click', function() {
            const selectedItem = document.querySelector('.inventory-item.selected');
            
            if (!selectedItem) {
                showGameMessage('Vui l√≤ng ch·ªçn v·∫≠t ph·∫©m ƒë·ªÉ b√°n!');
                return;
            }
            
            const itemId = selectedItem.getAttribute('data-id');
            const item = playerInventory.find(i => i.id === parseInt(itemId));
            
            const quantity = parseInt(document.getElementById('sell-quantity').value);
            const price = parseInt(document.getElementById('sell-price').value);
            
            if (item && quantity > 0 && quantity <= item.quantity && price > 0) {
                listItemForSale(item, quantity, price);
            } else {
                showGameMessage('Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng v√† gi√° h·ª£p l·ªá!');
            }
        });
    }
}

// G·ª≠i qu√† cho b·∫°n b√®
function sendGift(recipient, giftType) {
    // TODO: G·ª≠i y√™u c·∫ßu t·ªõi m√°y ch·ªß ƒë·ªÉ g·ª≠i qu√†
    
    // M√¥ ph·ªèng: Th√™m v√†o danh s√°ch qu√† ƒë√£ g·ª≠i
    const gift = {
        id: mockGifts.sent.length + mockGifts.received.length + 1,
        type: giftType,
        name: getGiftName(giftType),
        receiverId: recipient.id,
        receiverName: recipient.name,
        sentTime: "H√¥m nay"
    };
    
    mockGifts.sent.push(gift);
    
    showGameMessage(`ƒê√£ g·ª≠i ${gift.name} cho ${recipient.name}!`);
}

// Nh·∫≠n qu√†
function claimGift(gift) {
    // TODO: G·ª≠i y√™u c·∫ßu t·ªõi m√°y ch·ªß ƒë·ªÉ nh·∫≠n qu√†
    
    // M√¥ ph·ªèng: ƒê√°nh d·∫•u qu√† ƒë√£ ƒë∆∞·ª£c nh·∫≠n
    gift.claimed = true;
    
    // Th√™m v·∫≠t ph·∫©m v√†o kho ƒë·ªì ng∆∞·ªùi ch∆°i
    const inventoryItem = playerInventory.find(item => 
        item.type === gift.type && item.name === gift.name
    );
    
    if (inventoryItem) {
        inventoryItem.quantity += 1;
    } else {
        playerInventory.push({
            id: playerInventory.length + 1,
            type: gift.type,
            name: gift.name,
            quantity: 1
        });
    }
    
    showGameMessage(`B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c ${gift.name} t·ª´ ${gift.senderName}!`);
}

// Mua m·∫∑t h√†ng t·ª´ ch·ª£
function buyMarketItem(item) {
    // TODO: G·ª≠i y√™u c·∫ßu t·ªõi m√°y ch·ªß ƒë·ªÉ mua m·∫∑t h√†ng
    
    // M√¥ ph·ªèng: Ki·ªÉm tra ti·ªÅn c·ªßa ng∆∞·ªùi ch∆°i
    if ((gameState.money || 1250) < item.price) {
        showGameMessage('Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ mua v·∫≠t ph·∫©m n√†y!');
        return;
    }
    
    // Tr·ª´ ti·ªÅn
    gameState.money = (gameState.money || 1250) - item.price;
    
    // Th√™m v·∫≠t ph·∫©m v√†o kho ƒë·ªì
    const inventoryItem = playerInventory.find(i => 
        i.type === item.type && i.name === item.name
    );
    
    if (inventoryItem) {
        inventoryItem.quantity += 1;
    } else {
        playerInventory.push({
            id: playerInventory.length + 1,
            type: item.type,
            name: item.name,
            quantity: 1
        });
    }
    
    // Gi·∫£m s·ªë l∆∞·ª£ng m·∫∑t h√†ng trong ch·ª£
    item.quantity -= 1;
    
    // N·∫øu s·ªë l∆∞·ª£ng b·∫±ng 0, x√≥a m·∫∑t h√†ng kh·ªèi ch·ª£
    if (item.quantity <= 0) {
        const itemIndex = mockMarketItems.findIndex(i => i.id === item.id);
        if (itemIndex !== -1) {
            mockMarketItems.splice(itemIndex, 1);
        }
    }
    
    showGameMessage(`B·∫°n ƒë√£ mua ${item.name} v·ªõi gi√° ${item.price} xu!`);
    
    // C·∫≠p nh·∫≠t l·∫°i danh s√°ch m·∫∑t h√†ng
    loadMarketItems(mockMarketItems);
}

// ƒêƒÉng b√°n v·∫≠t ph·∫©m
function listItemForSale(item, quantity, price) {
    // TODO: G·ª≠i y√™u c·∫ßu t·ªõi m√°y ch·ªß ƒë·ªÉ ƒëƒÉng b√°n
    
    // M√¥ ph·ªèng: Th√™m v√†o danh s√°ch m·∫∑t h√†ng
    const marketItem = {
        id: mockMarketItems.length + 1,
        type: item.type,
        name: item.name,
        price: price,
        quantity: quantity,
        sellerId: 0, // ID c·ªßa ng∆∞·ªùi ch∆°i
        sellerName: "B·∫°n",
        listedTime: "V·ª´a ƒëƒÉng"
    };
    
    mockMarketItems.push(marketItem);
    
    // Gi·∫£m s·ªë l∆∞·ª£ng trong kho ƒë·ªì
    item.quantity -= quantity;
    
    // N·∫øu s·ªë l∆∞·ª£ng b·∫±ng 0, x√≥a kh·ªèi kho ƒë·ªì
    if (item.quantity <= 0) {
        const itemIndex = playerInventory.findIndex(i => i.id === item.id);
        if (itemIndex !== -1) {
            playerInventory.splice(itemIndex, 1);
        }
    }
    
    showGameMessage(`ƒê√£ ƒëƒÉng b√°n ${quantity} ${item.name} v·ªõi gi√° ${price} xu/v·∫≠t ph·∫©m!`);
    
    // C·∫≠p nh·∫≠t l·∫°i danh s√°ch v·∫≠t ph·∫©m trong kho v√† th·ªã tr∆∞·ªùng
    loadInventoryItems();
    
    // Chuy·ªÉn sang tab mua s·∫Øm
    document.querySelector('.market-tab[data-tab="browse-market"]').click();
}

// L·∫•y icon cho lo·∫°i qu√† t·∫∑ng
function getGiftIcon(type) {
    switch (type) {
        case 'seed':
            return 'üå±';
        case 'water':
            return 'üíß';
        case 'fertilizer':
            return 'üß™';
        default:
            return 'üéÅ';
    }
}

// L·∫•y t√™n cho lo·∫°i qu√† t·∫∑ng
function getGiftName(type) {
    switch (type) {
        case 'seed':
            return 'H·∫°t gi·ªëng';
        case 'water':
            return 'N∆∞·ªõc ma thu·∫≠t';
        case 'fertilizer':
            return 'Ph√¢n b√≥n';
        default:
            return 'Qu√† t·∫∑ng';
    }
}

// Thi·∫øt l·∫≠p th√¥ng b√°o m√¥ ph·ªèng
function setupMockNotifications() {
    // M√¥ ph·ªèng m·ªôt s·ªë th√¥ng b√°o sau m·ªôt kho·∫£ng th·ªùi gian
    setTimeout(() => {
        showGameMessage('B·∫°n nh·∫≠n ƒë∆∞·ª£c m·ªôt m√≥n qu√† t·ª´ Tom!');
        
        // C·∫≠p nh·∫≠t badge tr√™n n√∫t qu√† t·∫∑ng trong thanh c√¥ng c·ª•
        const giftsBadge = document.querySelector('.toolbar-item[data-tool="gifts"] .tool-badge');
        if (giftsBadge) {
            giftsBadge.textContent = parseInt(giftsBadge.textContent) + 1;
            giftsBadge.classList.add('alert');
        }
    }, 60000); // 1 ph√∫t
    
    setTimeout(() => {
        showGameMessage('Anna ƒë√£ thƒÉm n√¥ng tr·∫°i c·ªßa b·∫°n!');
    }, 120000); // 2 ph√∫t
}

// Hi·ªÉn th·ªã panel b·∫°n b√®
export function showFriendsPanel() {
    // ·∫®n t·∫•t c·∫£ c√°c panel kh√°c
    document.querySelectorAll('.game-panel').forEach(panel => {
        panel.classList.add('hidden');
    });
    
    // Hi·ªÉn th·ªã panel b·∫°n b√®
    const friendsPanel = document.getElementById('friends-panel');
    if (friendsPanel) {
        friendsPanel.classList.remove('hidden');
        
        // T·∫£i l·∫°i danh s√°ch b·∫°n b√®
        loadFriendsList(mockFriends);
    }
}

// Hi·ªÉn th·ªã panel qu√† t·∫∑ng
export function showGiftsPanel() {
    // ·∫®n t·∫•t c·∫£ c√°c panel kh√°c
    document.querySelectorAll('.game-panel').forEach(panel => {
        panel.classList.add('hidden');
    });
    
    // Hi·ªÉn th·ªã panel qu√† t·∫∑ng
    const giftsPanel = document.getElementById('gifts-panel');
    if (giftsPanel) {
        giftsPanel.classList.remove('hidden');
        
        // T·∫£i l·∫°i d·ªØ li·ªáu qu√† t·∫∑ng
        loadGiftRecipients();
        
        // X√≥a badge tr√™n n√∫t qu√† t·∫∑ng trong thanh c√¥ng c·ª•
        const giftsBadge = document.querySelector('.toolbar-item[data-tool="gifts"] .tool-badge');
        if (giftsBadge) {
            giftsBadge.textContent = '0';
            giftsBadge.classList.remove('alert');
        }
    }
}

// Hi·ªÉn th·ªã panel ch·ª£ trao ƒë·ªïi
export function showMarketPanel() {
    // ·∫®n t·∫•t c·∫£ c√°c panel kh√°c
    document.querySelectorAll('.game-panel').forEach(panel => {
        panel.classList.add('hidden');
    });
    
    // Hi·ªÉn th·ªã panel ch·ª£ trao ƒë·ªïi
    const marketPanel = document.getElementById('market-panel');
    if (marketPanel) {
        marketPanel.classList.remove('hidden');
        
        // T·∫£i l·∫°i d·ªØ li·ªáu ch·ª£
        loadMarketItems(mockMarketItems);
    }
}